<?php

/**
 * @file
 * Contains EntityValidatorTestCase.
 */

class EntityValidatorTestCase extends DrupalWebTestCase {

  private $instance;
  private $field;

  public static function getInfo() {
    return array(
      'name' => 'Validate entity',
      'description' => 'Test the validation on an entity.',
      'group' => 'Entity validator',
    );
  }

  function setUp() {
    parent::setUp('entity_validator', 'entity_validator_example', 'image');

    // Create the article and attach the field image.
    $this->drupalCreateContentType(array('name' => 'article'));

    if (!field_info_field('field_image')) {
      $field = array(
        'field_name' => 'field_image',
        'type' => 'image',
        'cardinality' => 1,
        'locked' => FALSE,
        'indexes' => array('fid' => array('fid')),
        'settings' => array(
          'uri_scheme' => 'public',
          'default_image' => FALSE,
        ),
        'storage' => array(
          'type' => 'field_sql_storage',
          'settings' => array(),
        ),
      );

      $this->field = field_create_field($field);
    }

    if (!field_info_instance('node', 'field_image', 'article')) {
      $instance = array(
        'field_name' => 'field_image',
        'entity_type' => 'node',
        'label' => 'Image',
        'bundle' => 'article',
        'description' => st('Upload an image to go with this article.'),
        'required' => FALSE,

        'settings' => array(
          'file_directory' => 'field/image',
          'file_extensions' => 'png gif jpg jpeg',
          'max_filesize' => '',
          'max_resolution' => '200X200',
          'min_resolution' => '100X100',
          'alt_field' => TRUE,
          'title_field' => '',
        ),

        'widget' => array(),
      );

      $this->instance = field_create_instance($instance);
    }
  }

  /**
   * Test the validation on an entity.
   */
  function testValidate() {
    $values = array(
      'type' => 'article',
      'uid' => 0,
    );
    $node = entity_create('node', $values);
    $handler = entity_validator_get_validator_handler('node', 'article');

    $wrapper = entity_metadata_wrapper('node', $node);
    $wrapper->field_image->set(array('fid' => $this->createImage()->fid));

    try {
      $handler->validate($node);
    }
    catch (\EntityValidatorException $e) {
      $this->pass('Exception "\EntityValidatorException" was thrown.');
    }
    catch (\Exception $e) {
      $this->fail('Exception was not of type "\EntityValidatorException".');
    }

    // Silent mode.
    $result = $handler->validate($node, TRUE);
    $this->assertFalse($result, 'Validate in silent mode did not throw an exception.');

    $result = $handler->getErrors(FALSE);
    $expected_result = array(
      'title' => array(
        array(
          'message' => 'The field @field cannot be empty.',
          'params' => array(
            '@field' => 'title',
          ),
        ),
        array(
          'message' => 'The @field should be at least 3 characters long.',
          'params' => array(
            '@field' => 'title',
          ),
        ),
      ),
      'body' => array(
        array(
          'message' => 'The @field should have the word "Gizra".',
          'params' => array (
            '@field' => 'body',
          ),
        ),
      ),
      'field_image' => array(
        array(
          'message' => 'The field @field cannot be empty.',
          'params' => array (
            '@field' => 'field_image',
          ),
        ),
      ),
    );
    $this->assertEqual($result, $expected_result, 'The silent mode returned the expected results.');
  }

  private function createImage() {
    $files = $this->drupalGetTestFiles('image');
    $file = reset($files);

    $source = new stdClass();
    $source->uri = $file->uri;
    $source->uid = 1;
    $source->filemime = 'image/' . pathinfo($file->uri, PATHINFO_EXTENSION);
    $source->filename = basename($file->uri);
    $file = file_save($source);

    return $file;
  }
}
